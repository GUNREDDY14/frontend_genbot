// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Company identification
  companyId     String    @unique @map("company_id")

  // Onboarding fields
  companyName   String?   @map("company_name")
  websiteUrl    String?   @map("website_url")
  companyType   String?   @map("company_type")
  onboardingCompleted Boolean @default(false) @map("onboarding_completed")

  // OTP verification fields
  isEmailVerified Boolean @default(false) @map("is_email_verified")
  otpVerified     Boolean @default(false) @map("otp_verified")

  // Relations
  accounts Account[]
  sessions Session[]
  chatbots Chatbot[]
  otpCodes OTPCode[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// OTP verification model
model OTPCode {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  email     String
  code      String
  type      String   // "registration", "login", "password_reset"
  expires   DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type, code])
  @@map("otp_codes")
}

// Application-specific models
model Chatbot {
  id          String   @id @default(cuid())
  name        String
  description String?
  website     String
  userId      String   @map("user_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  scrapedPages  ScrapedPage[]

  @@map("chatbots")
}

model Conversation {
  id        String   @id @default(cuid())
  chatbotId String   @map("chatbot_id")
  sessionId String   @map("session_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  chatbot  Chatbot   @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String   @id @default(cuid())
  conversationId String   @map("conversation_id")
  content        String
  isBot          Boolean  @map("is_bot")
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model ScrapedPage {
  id        String   @id @default(cuid())
  chatbotId String   @map("chatbot_id")
  url       String
  title     String?
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  chatbot Chatbot @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@unique([chatbotId, url])
  @@map("scraped_pages")
}

// Password reset tokens
model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  used    Boolean  @default(false)

  @@map("password_reset_tokens")
}